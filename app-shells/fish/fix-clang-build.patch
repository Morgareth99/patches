--- a/src/builtin_test.cpp	2018-10-21 00:13:46.819604478 -0000
+++ b/src/builtin_test.cpp	2018-10-21 00:21:15.354615544 -0000
@@ -278,7 +278,7 @@
     if (tok == test_bang) {
         unique_ptr<expression> subject(parse_unary_expression(start + 1, end));
         if (subject.get()) {
-            return make_unique<unary_operator>(tok, range_t(start, subject->range.end),
+            return ::make_unique<unary_operator>(tok, range_t(start, subject->range.end),
                                                move(subject));
         }
         return NULL;
@@ -333,7 +333,7 @@
     }
     // Our new expression takes ownership of all expressions we created. The token we pass is
     // irrelevant.
-    return make_unique<combining_expression>(test_combine_and, range_t(start, idx), move(subjects),
+    return ::make_unique<combining_expression>(test_combine_and, range_t(start, idx), move(subjects),
                                              move(combiners));
 }
 
@@ -350,7 +350,7 @@
     const token_info_t *info = token_for_string(arg(start));
     if (!(info->flags & UNARY_PRIMARY)) return NULL;
 
-    return make_unique<unary_primary>(info->tok, range_t(start, start + 2), arg(start + 1));
+    return ::make_unique<unary_primary>(info->tok, range_t(start, start + 2), arg(start + 1));
 }
 
 unique_ptr<expression> test_parser::parse_just_a_string(unsigned int start, unsigned int end) {
@@ -369,7 +369,7 @@
 
     // This is hackish; a nicer way to implement this would be with a "just a string" expression
     // type.
-    return make_unique<unary_primary>(test_string_n, range_t(start, start + 1), arg(start));
+    return ::make_unique<unary_primary>(test_string_n, range_t(start, start + 1), arg(start));
 }
 
 unique_ptr<expression> test_parser::parse_binary_primary(unsigned int start, unsigned int end) {
@@ -384,7 +384,7 @@
     const token_info_t *info = token_for_string(arg(start + 1));
     if (!(info->flags & BINARY_PRIMARY)) return NULL;
 
-    return make_unique<binary_primary>(info->tok, range_t(start, start + 3), arg(start),
+    return ::make_unique<binary_primary>(info->tok, range_t(start, start + 3), arg(start),
                                        arg(start + 2));
 }
 
@@ -412,7 +412,7 @@
     }
 
     // Success.
-    return make_unique<parenthetical_expression>(test_paren_open, range_t(start, close_index + 1),
+    return ::make_unique<parenthetical_expression>(test_paren_open, range_t(start, close_index + 1),
                                                  move(subexpr));
 }
 
@@ -446,7 +446,7 @@
             std::vector<unique_ptr<expression>> subjects;
             subjects.push_back(move(left));
             subjects.push_back(move(right));
-            result = make_unique<combining_expression>(center_token->tok, range_t(start, end),
+            result = ::make_unique<combining_expression>(center_token->tok, range_t(start, end),
                                                        move(subjects), move(combiners));
         }
     } else {
@@ -463,7 +463,7 @@
     if (first_token == test_bang) {
         unique_ptr<expression> subject(parse_3_arg_expression(start + 1, end));
         if (subject.get()) {
-            result = make_unique<unary_operator>(first_token, range_t(start, subject->range.end),
+            result = ::make_unique<unary_operator>(first_token, range_t(start, subject->range.end),
                                                  move(subject));
         }
     } else if (first_token == test_paren_open) {
--- a/src/complete.cpp	2018-10-21 00:22:49.467617865 -0000
+++ b/src/complete.cpp	2018-10-21 00:23:01.723618168 -0000
@@ -1436,7 +1436,7 @@
                                 wcstring faux_cmdline = cmd;
                                 faux_cmdline.replace(cmd_node->source_start,
                                                      cmd_node->source_length, wrap_chain.at(i));
-                                transient_cmd = make_unique<builtin_commandline_scoped_transient_t>(
+                                transient_cmd = ::make_unique<builtin_commandline_scoped_transient_t>(
                                     faux_cmdline);
                             }
                             if (!completer.complete_param(wrap_chain.at(i),
--- a/src/history.cpp	2018-10-21 00:23:50.075619361 -0000
+++ b/src/history.cpp	2018-10-21 00:29:49.628628231 -0000
@@ -712,7 +712,7 @@
     auto hs = histories.acquire();
     std::unique_ptr<history_t> &hist = hs.value[name];
     if (!hist) {
-        hist = make_unique<history_t>(name);
+        hist = ::make_unique<history_t>(name);
     }
     return *hist;
 }
--- a/src/parser.cpp	2018-10-21 00:30:32.753629294 -0000
+++ b/src/parser.cpp	2018-10-21 00:30:45.745629615 -0000
@@ -635,7 +635,7 @@
 profile_item_t *parser_t::create_profile_item() {
     profile_item_t *result = nullptr;
     if (g_profiling_active) {
-        profile_items.push_back(make_unique<profile_item_t>());
+        profile_items.push_back(::make_unique<profile_item_t>());
         result = profile_items.back().get();
     }
     return result;
@@ -675,7 +675,7 @@
 
     // Append to the execution context stack.
     execution_contexts.push_back(
-        make_unique<parse_execution_context_t>(std::move(tree), cmd, this, exec_eval_level));
+        ::make_unique<parse_execution_context_t>(std::move(tree), cmd, this, exec_eval_level));
     const parse_execution_context_t *ctx = execution_contexts.back().get();
 
     // Execute the first node.
